package com.text.demo.util;

import android.text.TextUtils;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * xmx
 */
public class JSONUtil {

    /**
     * Json串转JavaBean
     *
     * @param json
     * @param clazz
     * @param <T>
     * @return
     */
    public <T> T jsonToBean(String json, Class<T> clazz) {
        if (TextUtils.isEmpty(json.trim()) || json.equals("{}")) {
            return null;
        }
        JSONObject jsonObject;
        T t = null;
        try {
            if (clazz.getName().contains("$")) {//判断是否是内部类
                int start = 0;
                int index;
                while ((index = clazz.getName().indexOf("$", start)) != -1) {
                    Class<?> aClass = Class.forName(clazz.getName().substring(0, index));
                    start = index + 1;
                    if ((index = clazz.getName().indexOf("$", start)) != -1) {
                        Class<?> aClass1 = Class.forName(clazz.getName().substring(0, index));
                        Constructor constructor = aClass1.getDeclaredConstructor(new Class[]{aClass});
                        if (constructor != null) {
                            t = (T) constructor.newInstance(aClass.newInstance());
                        }
                    } else {
                        Constructor constructor = clazz.getDeclaredConstructor(new Class[]{t == null ? aClass : t.getClass()});
                        if (constructor != null) {
                            t = (T) constructor.newInstance(t == null ? aClass.newInstance() : t);
                        }
                    }
                }
            } else {
                t = clazz.newInstance();//创建实例
            }

            ArrayList<Field> fields = new ArrayList<Field>();
            List<Field> thisFields = Arrays.asList(clazz.getDeclaredFields());//获取子类的成员变量
            fields.addAll(thisFields);
            Class<? super T> superclass = clazz.getSuperclass();//获取父类的Class

            while (superclass != null && !superclass.getName().equals("java.lang.Object")){
                List<Field> superFields = Arrays.asList(superclass.getDeclaredFields());
                for (int i = 0; i < superFields.size(); i++){
                    for (int j = 0; j < fields.size(); j++){
                        if(fields.get(j).getName().equals(superFields.get(i).getName())){
                            throw new RuntimeException("父类中的属性和子类的重复了");
                        }
                    }
                }
                fields.addAll(superFields);
                superclass = superclass.getSuperclass();
            }

            jsonObject = new JSONObject(json);
            for (Field field : fields) {
                //跳过静态属性
                String mod = Modifier.toString(field.getModifiers());
                if (mod.indexOf("static") != -1 || jsonObject.opt(field.getName()) == null) {
                    continue;
                }
                field.setAccessible(true);//设置私有的可编辑
                String type = field.getType().getName();//获取当前属性的类型
                try {
                    if (type.equals("java.lang.String")) {
                        field.set(t, jsonObject.optString(field.getName()));
                    } else if (type.equals("int") || type.equals("java.lang.Integer")) {
                        field.setInt(t, jsonObject.optInt(field.getName()));
                    } else if (type.equals("double") || type.equals("java.lang.Double")) {
                        field.setDouble(t, jsonObject.optDouble(field.getName()));
                    } else if (type.equals("boolean") || type.equals("java.lang.Boolean")) {
                        field.setBoolean(t, jsonObject.optBoolean(field.getName()));
                    } else if (type.equals("short") || type.equals("java.lang.Short")) {
                        field.setShort(t, (short) jsonObject.optInt(field.getName()));
                    } else if (type.equals("byte") || type.equals("java.lang.Byte")) {
                        field.setByte(t, (byte) jsonObject.optInt(field.getName()));
                    } else if (type.equals("long") || type.equals("java.lang.Long")) {
                        field.setLong(t, jsonObject.optLong(field.getName()));
                    } else if (type.equals("float") || type.equals("java.lang.Float")) {
                        field.setFloat(t, (float) jsonObject.optDouble(field.getName()));
                    } else if (type.contains("java.util.") && type.contains("List")) {
                        JSONArray jsonArray = jsonObject.optJSONArray(field.getName());
                        if (jsonArray != null && !jsonArray.toString().equals("[]")) {
                            List<Object> list = (List<Object>) Class.forName(type).newInstance();
                            Type genericType = field.getGenericType();//获取List的类型和泛型类型
                            if (genericType == null) {
                                continue;
                            }
                            ParameterizedType pt = (ParameterizedType) genericType;//获取List的泛型
                            for (int i = 0; i < jsonArray.length(); i++) {
                                Object opt = jsonArray.opt(i);
                                if (opt instanceof JSONObject) {//如果是jsonObject说明泛型是类
                                    list.add(jsonToBean(opt.toString(), (Class) pt.getActualTypeArguments()[0]));
                                } else {
                                    list.add(opt);
                                }
                            }
                            field.set(t, list);
                        }
                    } else if (field.getClass() instanceof Object) {
                        //如果是对象，则递归继续给该对象的属性赋值
                        Object object = jsonToBean(jsonObject.optString(field.getName()), Class.forName(type));
                        if (object != null)
                            field.set(t, object);
                    }
                } catch (IllegalAccessException e) {//不能调用e.printStackTrace()抛异常，这样会退出循环，后续的值就没有赋值

                } catch (ClassNotFoundException e) {

                }
            }
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return t;
    }
}
